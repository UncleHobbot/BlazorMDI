@using BlazorMDI.Shared.Navigation
@inject HttpClient Http

<DxTreeView @ref="@treeView"
            Data="@nodes"
            TextExpression="@(dataItem => ((NavTreeNode)dataItem).Title)"
            NavigateUrlExpression="@(dataItem => ((NavTreeNode)dataItem).NavigateUrl)"
            IconCssClassExpression="@(dataItem => ((NavTreeNode)dataItem).Icon)"
            ChildrenExpression="@(dataItem => ((NavTreeNode)dataItem).SubNodes)"
            CssClass="app-sidebar"
            ExpandButtonIconCssClass="demo-icon-expand"
            CollapseButtonIconCssClass="demo-icon-collapse"
            AllowSelectNodes="true"
            NodeExpandCollapseAction="TreeViewNodeExpandCollapseAction.NodeClick"
            BeforeExpand="@BeforeExpand"
            SelectionChanged="@SelectionChanged">

    @*TextExpression - A lambda expression that returns the node’s text.
    NameExpression - A lambda expression that returns the node’s unique identifier (name).
    IconCssClassExpression - A lambda expression that returns the name of a CSS class applied to the node’s icon.
    NavigateUrlExpression - A lambda expression that returns the node’s target URL.*@

</DxTreeView>

@code {
    public DxTreeView treeView;
    List<NavTreeNode> nodes;

    protected override async Task OnInitializedAsync()
    {
        nodes = await Http.GetFromJsonAsync<List<NavTreeNode>>("api/Home/GetTree");
    }


    protected void SelectionChanged(TreeViewNodeEventArgs e)
    {
        if (e.NodeInfo.IsLeaf)
        {
            var parentInfo = e.NodeInfo.Parent;
            if (parentInfo != null)
            {
                var parentSiblingNodesInfo = treeView.GetNodesInfo(n => !n.IsLeaf && n.Level == parentInfo.Level && !string.Equals(n.Text, parentInfo.Text));
                foreach (var nodeInfo in parentSiblingNodesInfo)
                    treeView.SetNodeExpanded(n => string.Equals(n.Text, nodeInfo.Text), false);
            }
            //else
            //    treeView.CollapseAll();
        }
    }

    protected void BeforeExpand(TreeViewNodeCancelEventArgs e)
    {
        //if (!e.CausedByAPI)
        //    treeView.CollapseAll();
    }
}